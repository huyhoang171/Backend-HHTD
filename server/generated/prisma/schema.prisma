// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                         @id @default(autoincrement())
  username              String                      @unique
  email                 String?                     @unique
  password              String
  createdAt             DateTime                    @default(now())
  topicProgress         UserTopicProgress[] // Quan hệ với tiến trình học Topic
  grammarLessonProgress UserGrammarLessonProgress[] // Quan hệ với tiến trình học GrammarLesson
  userSpeakingProgress  UserSpeakingProgress[] // Quan hệ với tiến trình speaking
}

model Topic {
  id           Int                 @id @default(autoincrement())
  name         String
  parent_id    Int?
  titleVN      String?
  image        String?
  parent       Topic?              @relation("TopicParent", fields: [parent_id], references: [id], onDelete: SetNull)
  children     Topic[]             @relation("TopicParent")
  words        Word[]
  userProgress UserTopicProgress[] // Quan hệ với người dùng đã học topic này

  @@unique([name, parent_id])
}

model Word {
  id               Int     @id @default(autoincrement())
  word             String
  pos              String?
  phonetic         String?
  phonetic_text    String?
  phonetic_am      String?
  phonetic_am_text String?
  topic_id         Int?
  topic            Topic?  @relation(fields: [topic_id], references: [id], onDelete: SetNull)
  senses           Sense[]
}

model Sense {
  id         Int       @id @default(autoincrement())
  word_id    Int
  definition String
  word       Word      @relation(fields: [word_id], references: [id], onDelete: Cascade)
  examples   Example[]
}

model Example {
  id           Int     @id @default(autoincrement())
  sense_id     Int
  example_text String
  cf           String?
  sense        Sense   @relation(fields: [sense_id], references: [id], onDelete: Cascade)
}

model GrammarTopic {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  // progress    Int             @default(0) // Cân nhắc bỏ nếu progress này là của user
  // total       Int             @default(0) // Cân nhắc bỏ nếu total này là của user
  image       String?
  lessons     GrammarLesson[]
}

model GrammarLesson {
  id           Int                         @id @default(autoincrement())
  topic_id     Int
  title        String
  sub_title    String?
  path         String                      @unique
  image        String?
  topic        GrammarTopic                @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  userProgress UserGrammarLessonProgress[] // Quan hệ với người dùng đã học bài này
}

// Bảng lưu tiến trình học Topic của User
model UserTopicProgress {
  id             Int            @id @default(autoincrement())
  userId         Int
  topicId        Int
  status         ProgressStatus @default(NOT_STARTED)
  learnedWords   Int            @default(0) // Số từ đã học trong topic này
  lastAccessedAt DateTime       @updatedAt
  completedAt    DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId]) // Mỗi user chỉ có 1 record tiến trình cho mỗi topic
}

// Bảng lưu tiến trình học GrammarLesson của User
model UserGrammarLessonProgress {
  id              Int            @id @default(autoincrement())
  userId          Int
  grammarLessonId Int
  status          ProgressStatus @default(NOT_STARTED)
  // Có thể thêm các trường khác như score, attempts nếu có quiz trong bài học
  lastAccessedAt  DateTime       @updatedAt
  completedAt     DateTime?

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  grammarLesson GrammarLesson @relation(fields: [grammarLessonId], references: [id], onDelete: Cascade)

  @@unique([userId, grammarLessonId]) // Mỗi user chỉ có 1 record tiến trình cho mỗi grammar lesson
}

model Speaking {
  id           Int                    @id @default(autoincrement())
  title        String
  userProgress UserSpeakingProgress[]
}

model UserSpeakingProgress {
  id           Int @id @default(autoincrement())
  userId       Int
  spkId        Int
  learnedWords Int @default(0)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  speaking Speaking @relation(fields: [spkId], references: [id], onDelete: Cascade)

  @@unique([userId, spkId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
